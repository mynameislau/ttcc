---
  extends: airbnb
  env:
    es6: true
    browser: false
  rules:

    # disallow or enforce trailing commas
    comma-dangle: [2, only-multiline]
    # disallow assignment in conditional expressions
    no-cond-assign: [2, except-parens]
    # disallow use of console
    #no-console: 0
    # disallow use of constant expressions in conditions
    no-constant-condition: 2
    # disallow control characters in regular expressions
    no-control-regex: 2
    # disallow use of debugger
    #no-debugger:
    # disallow duplicate arguments in functions
    no-dupe-args: 2
    # disallow duplicate keys when creating object literals
    no-dupe-keys: 2
    # disallow a duplicate case label.
    no-duplicate-case: 2
    # disallow empty block statements
    no-empty: 2
    # disallow the use of empty character classes in regular expressions
    no-empty-character-class: 2
    # disallow assigning to the exception in a catch block
    no-ex-assign: 2
    # disallow double-negation boolean casts in a boolean context
    no-extra-boolean-cast: 2
    # disallow unnecessary parentheses
    no-extra-parens: 2
    # disallow unnecessary semicolons
    no-extra-semi: 2
    # disallow overwriting functions written as function declarations
    no-func-assign: 2
    # disallow function or variable declarations in nested blocks
    no-inner-declarations: [2, both]
    # disallow invalid regular expression strings in the RegExp constructor
    no-invalid-regexp: 2
    # disallow irregular whitespace outside of strings and comments
    no-irregular-whitespace: 2
    # disallow negation of the left operand of an in expression
    no-negated-in-lhs: 2
    # disallow the use of object properties of the global object (Math and JSON) as functions
    no-obj-calls: 2
    # disallow multiple spaces in a regular expression literal
    #no-regex-spaces:
    # disallow sparse arrays
    no-sparse-arrays: 2
    # disallow code that looks like two expressions but is actually one
    no-unexpected-multiline: 2
    # disallow unreachable statements after a return, throw, continue, or break statement
    no-unreachable: 2
    # disallow comparisons with the value NaN
    use-isnan: 2
    # ensure JSDoc comments are valid
    #valid-jsdoc: 2
    # ensure results of typeof are compared against a valid string
    valid-typeof: 2





    # enforce getter/setter pairs in objects
    accessor-pairs: [2, { setWithoutGet: true }]
    # enforce return statements in callbacks of arrayâ€™s methods
    array-callback-return: 2
    # treat var statements as if they were block scoped
    block-scoped-var: 2
    # specify the maximum cyclomatic complexity allowed in a program
    #complexity:
    # require return statements to either always or never specify values
    #consistent-return:
    # specify curly brace conventions for all control statements
    curly: 2
    # require default case in switch statements
    default-case: 2
    # enforce consistent newlines before or after dots
    dot-location: 2
    # encourage use of dot notation whenever possible
    dot-notation: 2
    # require use of === and !==
    eqeqeq: 2
    # ensure for-in loops have an if statement
    guard-for-in: 2
    # disallow use of alert, confirm, and prompt
    no-alert: 2
    # disallow use of arguments.caller or arguments.callee
    no-caller: 2
    # disallow lexical declarations in case clauses
    no-case-declarations: 2
    # disallow division operators explicitly at beginning of regular expression
    no-div-regex: 2
    # disallow else after a return in an if
    no-else-return: 2
    # disallow use of empty functions
    no-empty-function: 2
    # disallow use of empty destructuring patterns
    no-empty-pattern: 2
    # disallow comparisons to null without a type-checking operator
    no-eq-null: 2
    # disallow use of eval()
    no-eval: 2
    # disallow adding to native types
    no-extend-native: 2
    # disallow unnecessary function binding
    no-extra-bind: 2
    # disallow unnecessary labels
    no-extra-label: 2
    # disallow fallthrough of case statements
    no-fallthrough: 2
    # disallow the use of leading or trailing decimal points in numeric literals
    no-floating-decimal: 2
    # disallow the type conversions with shorter notations
    no-implicit-coercion: 2
    # disallow var and named functions in global scope
    no-implicit-globals: 2
    # disallow use of eval()-like methods
    no-implied-eval: 2
    # disallow this keywords outside of classes or class-like objects
    no-invalid-this: 2
    # disallow usage of __iterator__ property
    no-iterator: 2
    # disallow use of labeled statements
    no-labels: 2
    # disallow unnecessary nested blocks
    no-lone-blocks: 2
    # disallow creation of functions within loops
    no-loop-func: 2
    # disallow the use of magic numbers
    #no-magic-numbers:
    # disallow use of multiple spaces
    no-multi-spaces: 2
    # disallow use of multiline strings
    no-multi-str: 2
    # disallow reassignments of native objects
    no-native-reassign: 2
    # disallow use of the new operator when not part of an assignment or comparison
    no-new: 2
    # disallow use of new operator for Function object
    no-new-func: 2
    # disallow creating new instances of String,Number, and Boolean
    no-new-wrappers: 2
    # disallow use of octal literals
    no-octal: 2
    # disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    no-octal-escape: 2
    # disallow reassignment of function parameters
    no-param-reassign: 2
    # disallow usage of __proto__ property
    no-proto: 2
    # disallow declaring the same variable more than once
    no-redeclare: 2
    # disallow use of assignment in return statement
    no-return-assign: 2
    # disallow use of javascript: urls.
    no-script-url: 2
    # disallow assignments where both sides are exactly the same
    no-self-assign: 2
    # disallow comparisons where both sides are exactly the same
    no-self-compare: 2
    # disallow use of the comma operator
    no-sequences: 2
    # restrict what can be thrown as an exception
    no-throw-literal: 2
    # disallow unmodified conditions of loops
    no-unmodified-loop-condition: 2
    # disallow usage of expressions in statement position
    no-unused-expressions: 2
    # disallow unused labels
    no-unused-labels: 2
    # disallow unnecessary .call() and .apply()
    no-useless-call: 2
    # disallow unnecessary concatenation of literals or template literals
    no-useless-concat: 2
    # disallow unnecessary usage of escape character
    #no-useless-escape: 2
    # disallow use of the void operator
    no-void: 2
    # disallow usage of configurable warning terms in comments: e.g. TODO or FIXME
    #no-warning-comments:
    # disallow use of the with statement
    no-with: 2
    # require use of the second argument for parseInt()
    #radix:
    # require declaration of all vars at the top of their containing scope
    vars-on-top: 2
    # require immediate function invocation to be wrapped in parentheses
    wrap-iife: 2
    # require or disallow Yoda conditions
    yoda: 2



    # enforce or disallow variable initializations at definition
    #init-declarations:
    # disallow the catch clause parameter name being the same as a variable in the outer scope
    no-catch-shadow: 2
    # disallow deletion of variables
    no-delete-var: 2
    # disallow labels that share a name with a variable
    no-label-var: 2
    # restrict usage of specified global variables
    no-restricted-globals: 2
    # disallow declaration of variables already declared in the outer scope
    no-shadow: 2
    # disallow shadowing of names such as arguments
    no-shadow-restricted-names: 2
    # disallow use of undeclared variables unless mentioned in a /*global */ block
    no-undef: 2
    # disallow use of undefined when initializing variables
    no-undef-init: 2
    # disallow use of undefined variable
    no-undefined: 2
    # disallow declaration of variables that are not used in the code
    no-unused-vars: 2
    # disallow use of variables before they are defined
    no-use-before-define: 2

    # enforce return after a callback
    #callback-return:
    # enforce require() on top-level module scope
    global-require: 2
    # enforce error handling in callbacks
    handle-callback-err: 2
    # disallow mixing regular variable and require declarations
    no-mixed-requires: 2
    # disallow use of new operator with the require function
    no-new-require: 2
    # disallow string concatenation with __dirname and __filename
    no-path-concat: 2
    # disallow use of process.env
    no-process-env: 2
    # disallow process.exit()
    no-process-exit: 2
    # restrict usage of specified modules when loaded by require function
    no-restricted-modules: 2
    # disallow use of synchronous methods
    no-sync: 2


    # enforce spacing inside array brackets
    array-bracket-spacing: [2, never]
    # disallow or enforce spaces inside of single line blocks
    block-spacing: 2
    # enforce one true brace style
    brace-style: [0, 'stroustrup', { allowSingleLine: true }]
    # require camel case names
    camelcase: 2
    # enforce spacing before and after comma
    comma-spacing: 2
    # enforce one true comma style
    comma-style: [2, last]
    # require or disallow padding inside computed properties
    computed-property-spacing: [2, never]
    # enforce consistent naming when capturing the current execution context
    consistent-this: [2, self]
    # enforce newline at the end of file, with no multiple empty lines
    eol-last: 2
    # require function expressions to have a name
    #func-names:
    # enforce use of function declarations or expressions
    #func-style:
    # disallow certain identifiers to prevent them being used
    #id-blacklist:
    # enforce minimum and maximum identifier lengths (variable names, property names etc.)
    #id-length:
    # require identifiers to match the provided regular expression
    #id-match:
    # specify tab or space width for your code
    indent: [2, 2]
    # specify whether double or single quotes should be used in JSX attributes
    jsx-quotes: [2, prefer-double]
    # enforce spacing between keys and values in object literal properties
    key-spacing: [2, { beforeColon: false, afterColon: true }]
    # enforce spacing before and after keywords
    keyword-spacing: 2
    # enforce linebreak style
    #linebreak-style:
    # enforce empty lines around comments
    #lines-around-comment:
    # specify the maximum depth that blocks can be nested
    #max-depth:
    # specify the maximum length of a line in your program
    #max-len:
    # specify the maximum depth callbacks can be nested
    #max-nested-callbacks:
    # specify the number of parameters that can be used in the function declaration
    #max-params:
    # specify the maximum number of statement allowed in a function
    #max-statements:
    # specify the maximum number of statements allowed per line
    #max-statements-per-line:
    # require a capital letter for constructors
    new-cap: 0
    # disallow the omission of parentheses when invoking a constructor with no arguments
    new-parens: 2
    # require or disallow an empty newline after variable declarations
    #newline-after-var:
    # require newline before return statement
    #newline-before-return:
    # enforce newline after each call when chaining the calls
    newline-per-chained-call: 2
    # disallow use of the Array constructor
    no-array-constructor: 2
    # disallow use of bitwise operators
    no-bitwise: 2
    # disallow use of the continue statement
    no-continue: 2
    # disallow comments inline after code
    no-inline-comments: 2
    # disallow if as the only statement in an else block
    no-lonely-if: 2
    # disallow mixed spaces and tabs for indentation
    no-mixed-spaces-and-tabs: 2
    # disallow multiple empty lines
    #no-multiple-empty-lines:
    # disallow negated conditions
    no-negated-condition: 2
    # disallow nested ternary expressions
    #no-nested-ternary:
    # disallow the use of the Object constructor
    #no-new-object:
    # disallow use of unary operators, ++ and --
    no-plusplus: 2
    # disallow use of certain syntax in code
    #no-restricted-syntax:
    # disallow space between function identifier and application
    no-spaced-func: 2
    # disallow the use of ternary operators
    no-ternary: 0
    # disallow trailing whitespace at the end of lines
    no-trailing-spaces: 2
    # disallow dangling underscores in identifiers
    no-underscore-dangle: 2
    # disallow the use of ternary operators when a simpler alternative exists
    no-unneeded-ternary: 2
    # disallow whitespace before properties
    no-whitespace-before-property: 2
    # require or disallow padding inside curly braces
#object-curly-spacing:
    # require or disallow one variable declaration per function
#one-var:
    # require or disallow an newline around variable declarations
#one-var-declaration-per-line:
    # require assignment operator shorthand where possible or prohibit it entirely
#operator-assignment:
    # enforce operators to be placed before or after line breaks
#operator-linebreak:
    # enforce padding within blocks
#padded-blocks:
    # require quotes around object literal property names
#quote-props:
    # specify whether backticks, double or single quotes should be used
#quotes:
    # require JSDoc comment
#require-jsdoc:
    # require or disallow use of semicolons instead of ASI
#semi:
    # enforce spacing before and after semicolons
#semi-spacing:
    # enforce sorting import declarations within module
#sort-imports:
    # enforce sorting variables within the same declaration block
#sort-vars:
    # require or disallow a space before blocks
#space-before-blocks:
    # require or disallow a space before function opening parenthesis
#space-before-function-paren:
    # require or disallow spaces inside parentheses
#space-in-parens:
    # require spaces around operators
#space-infix-ops:
    # require or disallow spaces before/after unary operators
#space-unary-ops:
    # require or disallow a space immediately following the // or /* in a comment
#spaced-comment:
    # require regex literals to be wrapped in parentheses
#wrap-regex: